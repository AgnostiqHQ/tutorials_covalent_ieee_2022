@ct.electron
def get_test_results_quantum(dataloader_test, opt_params, prob_func, predict_func, wires, measure_bits, num_dat=None):
    # pass a dataloader with 1 batch size to cycle through testing
    alpha1, alpha2 = opt_params
    iterable = iter(dataloader_test)
    results = []
    if num_dat is None:
        num_dat = len(dataloader_test.dataset)
    for i in range(num_dat):
        x1, x2, label = next(iterable)
        x1 = torch.flatten(x1) # embedding requires flat tensor
        x2 = torch.flatten(x2)

        prob = prob_func(x1, x2, label, alpha1, alpha2, wires, similarity_circuit, ansatz=qml.QAOAEmbedding, measure_bits=2)
        prediction = predict_func(prob)
        results.append([label.item(), prediction.item(), prob.item()])
    return results


