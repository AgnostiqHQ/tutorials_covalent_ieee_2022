@ct.electron
def train_quantum_net(lr, init_params, dataloader_train, batch_cost_func, similarity_circuit,
                      measure_bits, epochs, pytorch_optimizer, print_intermediate=False):

    opt = pytorch_optimizer(init_params, lr=lr)
    dataiter = iter(dataloader_train)
    alpha1, alpha2 = init_params

    def closure():
        opt.zero_grad()
        loss = batch_cost_func(next(dataiter), alpha1, alpha2, 
                               similarity_circuit=similarity_circuit,
                               wires=dev.wires, measure_bits=measure_bits)
        loss.backward()
        return loss
    
    loss_history = [] 
    for epoch in range(epochs):
        dataiter = iter(dataloader_train)
        for i in range(len(dataloader_train)):
            loss = opt.step(closure)
            loss_history.append(loss.item()) 
        if epoch % 10 == 0 and print_intermediate:
            print(f"Epoch number {epoch}\n Current loss {loss.item()}\n")
    return loss_history, opt


